package chapter_5_stringproblem;
/**
 * 0左边必有1的二进制字符串数量：给定一个整数N，求由"0"字符与"1"字符组成的长度为N的所有的字符串中，满足"0"字符的左边必有"1"字符的字符串数量
 * 举例： N = 1.只由"0"与"1"组成，长度为1的所有字符串："0"、"1"。只有字符串"1"满要求，所以返回1
 * 		N =2. 只由"0"与"1"组成，长度为2的所有字符串为"00"、"01"、"10"、"11".只有字符串"10"和"11"满足要求，所以返回2
 * 		N = 3。 只有"0"与"1"组成，长度为2的所有字符串为:"000","001","010","011","100","101","110","111".字符串"101"、"110"、"111"满足要求，所以返回3
 * @author zhangy
 *
 */
public class ZeroLeftOneStringNumber {
	/**
	 * 暴力解法：就是检查每一个长度为N的二进制字符串，看偶多少符合要求，一个长度为N的二进制字符串，检查是否符合要求的时间复杂度为O(N),长度为N的二进制字符串数量为O(2^N).
	 * 所以暴力解法的整体时间复杂度为O(2^N * N).
	 * O(2^N)的方法，假设第0位的字符为最高位字符，很明显，第0位的字符不能为'0'.假设p(i)表示0～i-1位置上的字符已经确定，这一段符合要求且第i-1位置的字符为'1'时，如果
	 * 穷举i~N-1位置上的所有情况会产生多少中符合要求的字符串。比如N=5，p(3)表示0～2位置上的字符已经确定，这一段符合要求且位置2上的字符为'1'时，假设为"101..".在这种
	 * 情况下，穷举3～4位置所有可能的情况会产生多少中符合要求的字符串，因为只有"10101"、"10110"和"10111"，所以p(3)=3.也可以假设前三位是"111..",p(3)同样等于3.
	 * 有了p(i)的定义，同时知道不管N是多少，最高位的字符只能为'1',那么只要求出p(1)就是所有符合要求的字符串数量。
	 * 
	 * 那么p(i)应该怎求呢？根据p(i)的定义，在位置i-1的字符已经为'1'的情况下，位置i的字符可以为'1'，也可以是'0'。如果位置i的字符是'1'，那么穷举剩下字符的所有可能性，
	 * 并且符合要求的字符串数量就是p(i+1)的值。如果位置i的字符是'0'，那么位置i+1的字符必须是'1'，穷举剩下的字符的所有可能性，符合要求的字符串数量就是p(i+2)的值。
	 * 所以p(i) = p(i+1)+p(i+2),P(N-1)表示除了最后位置的字符，前面的子串全符合要求，并且倒数第二个字符为'1'，此时剩下的最后一个字符既可以是'1',也可以是'0'.所以
	 * p(N-1) = 2.p(N)表示所有的字符串已经完全确定，并且符合要求，最后一个字符(N-1)为'1',所以此时符合要求的字符串数量就是0～N-1的全体，而不再有后续的可能性，所以
	 * p(N)=1.即p(i)如下：
	 * 		i < N-1时，p(i) = p(i+1)+p(i+2)
	 * 		i = N-1时，p(i) = 2
	 * 		i = N时，p(i) = 1
	 */
	
	public int getNum1(int n){
		if(n < 1){
			return 0;
		}
		return process(1, n);
	}
	public int process(int i, int n){
		if(i == n -1){
			return 2;
		}
		if(i == n){
			return 1;
		}
		return process(i + 1, n) + process(i+2, n);
		
	}
	//根据以上方法，当N分别为1，2，3，4，5，6，7，8时，结算的结果为1，2，3，5，8，13，21，34.可以看出这就是一个形如斐波那契数列的结果
	public int getNum2(int N){
		if(N < 1){
			return 0;
		}
		if(N == 1){
			return 1;
		}
		int pre =1;
		int temp = 0;
		int cur = 1;
		for(int i = 2; i < N + 1; i++){//遍历的角标就是i从第二个位置开始，i = 2
			temp = cur;
			cur += pre;
			pre = temp;
		}
		return cur;
	}
	public static void main(String[] args){
		ZeroLeftOneStringNumber zlosn = new ZeroLeftOneStringNumber();
		System.out.println(zlosn.getNum1(10));
		System.out.println(zlosn.getNum2(10));
	}

}
